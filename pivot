#!/usr/bin/python3
""" 
pivot is command line tool to transpose rows into columns

    ~$ pivot --help

[One]

    $ stat
    1387461970 647 crw--w---- 1 grijesh tty 268435456 0 "Jul 20 13:25:41 2022" "Jul 20 13:25:41 2022" "Jul 20 13:25:41 2022" "Jan  1 05:30:00 1970" 131072 0 0 (stdin)
    $ stat | pivot
    1387461970
    647
    crw--w----
    1
    grijesh
    tty
    268435456
    0
    Jul 20 13:24:41 2022
    Jul 20 13:24:41 2022
    Jul 20 13:24:41 2022
    Jan  1 05:30:00 1970
    131072
    0
    0
    (stdin)

[Two]
    ~$ cat dummy.csv
    one, two
    three, four
    five, sixe, zero
    seven, eight
    nine, ten
    ~$ cat dummy.csv | pivot
    one,   three,   five,   seven,   nine,
    two    four     sixe,   eight    ten
                    zero
    ~$ cat dummy.csv | pivot -F ,
    one   three   five   seven   nine
    two   four    sixe   eight   ten
                  zero

[Three]
    ~$ cat example.csv
    "something","a","b","c","d","message"
    "one","1","2","3","4","NA"
    "two","#5","6","","8","world"
    "three","9","10","-1","12","-1"
    ," 12"," 12"," 12"," 13"
    "#six"," 1"," 2"," 3"," 4","5"
    ~$ cat example.csv | pivot -F ,
    something   one   two     three        #six
    a           1     #5      9       12   1
    b           2     6       10      12   2
    c           3             -1      12   3
    d           4     8       12      13   4
    message     NA    world   -1           5

    Pivot command also accepts multichar sperator

    Though for this CSV,'","' is bad seprator
    ~$ cat example.csv | pivot -F '","'
    something   one   two     three   ," 12   #six
    a           1     #5      9       12      1
    b           2     6       10      12      2
    c           3             -1      13      3
    d           4     8       12              4
    message     NA    world   -1              5

    You can use ',"'
    ~$ cat example.csv | pivot -F ',"'
    something   one   two     three        #six
    a           1     #5      9       12   1
    b           2     6       10      12   2
    c           3             -1      12   3
    d           4     8       12      13   4
    message     NA    world   -1           5

[Four]
    ~$ cat example.csv | pivot -F ',"' -c -n -s
"""

import argparse
import sys, os
import csv
from itertools import zip_longest
from operator import itemgetter
from string import whitespace

def argparser(args):
    parser = argparse.ArgumentParser(description='Pivot CSV like data for vertical view')
    parser.add_argument('-F', metavar='field separator', dest='fseparator', 
                        help=('field separator to split line into seprate words, '
                              '-F are NOT regex'))
    parser.add_argument('-s', dest='sort', action='store_true', help="apply sort")
    parser.add_argument('-n', dest='number', action='store_true', 
                        help="print column number")
    parser.add_argument('-c', '--color', dest='color', action='store_true', 
                        help="print alternate rows colored")
    parser.add_argument('--example', '--examples', action='store_true',
                        help="show helpful examples")
    parsed = parser.parse_args(args)
    if parsed.example:
        sys.exit(__doc__)
    return parsed

# csv does not work for multichars seprator, though this code work with best of its judgement
def readlines(sep):
    if len(sep) == 1:
        splitedlines = csv.reader(sys.stdin, delimiter=sep)
    else:
        splitedlines = (line.split(sep) for line in sys.stdin)
    chars =  whitespace + "".join({'"', "'"} & {*sep})
    return ((s.strip(chars) for s in line) for line in splitedlines)

def pivot(sep=' '):
    """ read each line as tuple and transpose """
    lines = readlines(sep) 
    plines = [*zip_longest(*lines, fillvalue=" ")]
    if not plines:
        sys.exit(f"{os.path.basename(sys.argv[0])}: no value")
    return plines

def oformat(lines):
    """ prepare format string  """
    maxlens = [1] * len(lines[0])
    for row in lines:
        lens = map(len, row)
        maxlens = map(max, maxlens, lens)
    return "".join('{:<%s}' % (maxlen + 3) for maxlen in maxlens)

def output(oformat, lines, color=False):
    """ stdouts each line using oformat string """
    for i, line in enumerate(lines):
        if color and i % 2:
            print('\033[35m' + oformat.format(*line) + '\033[0m')
            continue
        print(oformat.format(*line))

if __name__ == "__main__":
    options = argparser(sys.argv[1:])
    lines = pivot(options.fseparator or ' ')
    if options.number:
        lines = [('%3s' % i, *line) for i, line in enumerate(lines, 1)]
    if options.sort:
        ncolumn = int(options.number)
        lines.sort(key=itemgetter(ncolumn))
    output(oformat(lines), lines, color=options.color)
